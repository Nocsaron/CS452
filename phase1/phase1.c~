/*------------------------------------------------------------------------
 * CS452 - Phase 1 Operating System
 * Author: N R Callahan, Noah Sleiman
 *
 * ----------------------------------------------------------------------*/


#include <stddef.h>
#include <stdlib.h>
#include "usloss.h"
#include "phase1.h"
#include "linked_list.h"

/* ----------------------------Constants----------------------------------- */
#define DEBUG       0   /* 0: No debug statements
                           1: Some debug statements
                           2: Most debug statements
                           3: All debug statements */

#define MINPRIORITY 6
#define MAXPRIORITY 1

#define NO_PROCESS  0
#define READY       1
#define RUNNING     2
#define FINISHED    3
#define BLOCKED     4

/* ----------------------Function Defnitions------------------------------- */
int sentinel(void * notused);
int isKernel();
void dispatcher();

// Interrupt Handlers
void clock_handler(int dev, void *arg);
void alarm_handler(int dev, void *arg);
void disk_handler(int dev, void *arg);
void term_handler(int dev, void *arg);
void sys_handler(int dev, void *arg);

/* -------------------------- Globals ------------------------------------- */

typedef struct { 
    int value;
    List *q; 
} Semaphore;


typedef struct {
    USLOSS_Context      context;                /* State of process */
    int                 (*startFunc)(void *);   /* Starting Function */
    void                *startArg;              /* Argument to starting function */
    char                *name;                  /* Process Name */
    int                 PID;                    /* Process Identifier */
    int                 priority;               /* Process Priority */
    char                *stack;                 /* Process Stack */
    int                 status;                 /* Current Status of Process */
    int                 return_status;          /* Return Status */
    int                 time_start;             /* Start time of process */
    int                 cyclesUsed;             /* Clock cycles process has run */
    int                 parentPID;              /* PID of Parent Process */
    List                *children;              /* List of Child Processes */
    Semaphore           **QuitChildren;           /* Semaphore to wait if children have not yet quit */
} PCB;

//--Device Semaphores
    int numberOfSemaphores = 0;
    P1_Semaphore clock_sem;
    P1_Semaphore alarm_sem;
    P1_Semaphore disk_sem_0, disk_sem_1;
    P1_Semaphore term_sem_0, term_sem_1, term_sem_2, term_sem_3;
//--Device Statuses
    int clock_status;
    int alarm_status;
    int disk_status_0,disk_status_1;
    int term_status_0, term_status_1, term_status_2 ,term_status_3;

//--Clock Stuff
    int quantum_count = 0;
    int clock_count = 0;

//--Process Table
    PCB procTable[P1_MAXPROC];
//--Current PID
    int currentPID = -1;        /* Intial PID (prior to any process) is -1 */
//--Number of Process
    int numberProcs = 0;        /* Number of process running */
//--ReadyList
    List *readyList;
//--BlockedList
    List *blockedList;

/* -------------------------- Functions ----------------------------------- */
/* ------------------------------------------------------------------------
 * Name:        startup
 * Purpose:     Required by USLOSS
 *              Initializes semaphores, process table, interupts
 *              Starts the sentinel process and calls P2_Startup
 * Parameter:   none
 * Returns:     nothing
 * Side Effects:Starts System
 * ----------------------------------------------------------------------- */
void startup() {
    if(DEBUG == 3) USLOSS_Console("startup(): Entered startup\n");
//--Initialize Process Table
    if(DEBUG == 3) USLOSS_Console("startup(): Initializing Process Table\n");
    int i = 0;
    for(i = 0; i < P1_MAXPROC; i++) {
        procTable[i].status=NO_PROCESS;
    }

//--Set up interupt handlers
    USLOSS_IntVec[USLOSS_CLOCK_INT]   = clock_handler;
    USLOSS_IntVec[USLOSS_ALARM_INT]   = alarm_handler;
    USLOSS_IntVec[USLOSS_DISK_INT]    = disk_handler;
    USLOSS_IntVec[USLOSS_TERM_INT]    = term_handler;
    USLOSS_IntVec[USLOSS_SYSCALL_INT] = sys_handler; 
//--Initialize Ready and Blocked lists
    if(DEBUG == 3) USLOSS_Console("startup(): Initializing Ready and Blocked Lists\n");
    readyList   = create_list();
    blockedList = create_list();
//--Setup sentinel process
    if(DEBUG >= 2) USLOSS_Console("startup(): Forking Sentinel\n");
    P1_Fork("sentinel",sentinel,NULL,USLOSS_MIN_STACK, MINPRIORITY);
//--Setup start process
    if(DEBUG >= 2) USLOSS_Console("startup(): Forking P2_Startup\n");
    P1_Fork("P2_Startup",P2_Startup,NULL,4*USLOSS_MIN_STACK,4);
    P1_DumpProcesses();
    if(DEBUG == 3) USLOSS_Console("startup(): End of startup\n");
    return;
}
/* ------------------------------------------------------------------------
 * Name:        finish 
 * Purpose:     Required by USLOSS
 * Parameter:   none
 * Returns:     nothing
 * Side Effects:None
 * ----------------------------------------------------------------------- */
void finish() {
//--Really nothing to do there, just insert a print statement
}
/* ------------------------------------------------------------------------
 * Name:        launch() 
 * Purpose:     Dummy function to enable interrupts and launch a process
 * Parameter:   none
 * Returns:     nothing
 * Side Effects:enable interrupts
 * ----------------------------------------------------------------------- */
void launch(void) {
    //--I have no idea whats going on here. Copy from skeleton file
    int pid = P1_GetPID();
    if(DEBUG == 3) USLOSS_Console("launch(): Entered launch()\n");
    int rc;
    USLOSS_PsrSet(USLOSS_PsrGet() | USLOSS_PSR_CURRENT_INT);
    rc = procTable[pid].startFunc(procTable[pid].startArg);
    P1_Quit(rc);
}


/* ------------------------------------------------------------------------
 * Name:        P1_Fork 
 * Purpose:     Creates and initializes a new process.  Updates globals to reflect new state
 * Parameter:   char *name - Name of the new function
 *              int (*func)(void *) - The first function the new process executes
 *              void *arg - Arguments for the first function
 *              int stackSize - size of the process stack [Must be > USLOSS MIN STACK SIZE]
 *              int priority - Priority of the new process. [Must be > parent priority (M1)]
 * Returns:     int pid - 
 *                  -3: Invalid Priority
 *                  -2: Stacksize less than USLOSS_MIN_STACK
 *                  -1: No more processes
 *                 >=0: PID of created process
 * Side Effects:ReadyList Modified  
 *              Process Added to process table
 *              Current Process (may) change
 * ----------------------------------------------------------------------- */
int P1_Fork(char *name, int(*f)(void *), void *arg, int stacksize, int priority) {
    if(DEBUG ==3) USLOSS_Console("P1_Fork(): Entered P1_Fork\n");
    int newPID = -1;
 //--Check if in Kernel Mode
    if(DEBUG >= 2) USLOSS_Console("P1_Fork(): Check for kernel mode\n");
    if(!isKernel()) {
        USLOSS_Console("ERROR: Not in kernel mode. Exiting...\n");
        USLOSS_Halt(1);
    }
 //--Disable interrupts
 //--Validate input
 //----Valid Priority
    if(DEBUG == 3) USLOSS_Console("P1_Fork(): Checking priority\n");
    if(priority < MAXPRIORITY || priority > MINPRIORITY)
        return -3;
 //----Valid Stack Size
    if(DEBUG == 3) USLOSS_Console("P1_Fork(): Checking Stack Size\n");
    if(stacksize < USLOSS_MIN_STACK) 
        return -2;
 //----Enough space for new process
 //----Iterate through process table looking for empty spot
    int i;
    for(i = 0; i < P1_MAXPROC; i++) {
     //--If a spot is empty, set that spot to new PID and exit loop
        if(procTable[i].status == NO_PROCESS) {
            newPID = i;
            break;
        }
    }
    if(newPID == -1) 
        return -1;
    if(DEBUG == 3) USLOSS_Console("P1_Fork(): New pid is: %d\n",newPID);
 //----(name/func cant be null??)
    
 //--Initialize PCB
    if(DEBUG >= 2) USLOSS_Console("P1_Fork(): Intializing new PCB\n");
 //--Update Parent PCB to reflect new child
    procTable[newPID].startFunc     = f;
    procTable[newPID].startArg      = arg;
    procTable[newPID].name          = name;
    procTable[newPID].PID           = newPID;
    procTable[newPID].status        = READY;
    procTable[newPID].priority      = priority;
    procTable[newPID].time_start    = 0;
    procTable[newPID].cyclesUsed    = 0;
    procTable[newPID].parentPID     = P1_GetPID();
    procTable[newPID].children      = create_list();
 //--Wierd Case for P2
    if(newPID == 1)
        procTable[newPID].parentPID=1;
 //--Allocate Stack
    if(DEBUG >= 2) USLOSS_Console("P1_Fork(): Allocating space for stack\n");
    procTable[newPID].stack = malloc(stacksize);
 //--Initialize context
    if(DEBUG >= 2) USLOSS_Console("P1_Fork(): Calling USLOSS_ContextInit()\n");
    USLOSS_ContextInit(&(procTable[newPID].context), USLOSS_PsrGet(), procTable[newPID].stack, stacksize, launch);
 //--Add to parents child list
    if(DEBUG == 3) USLOSS_Console("P1_Fork(): Adding new process to parent's child list\n");
    if(P1_GetPID() > -1)
        append_list(procTable[P1_GetPID()].children, newPID, procTable[newPID].priority);
 //--Add to readylist
    if(DEBUG == 3) USLOSS_Console("P1_Fork(): Adding new process to ready list\n");
    insert(readyList,newPID, procTable[newPID].priority);
 //--call dispatcher
    if(DEBUG >= 2) USLOSS_Console("P1_Fork(): Calling dispatcher()\n");
    numberProcs++;
    dispatcher();
 //--Enable interrupts
 //--Return PID
    return newPID;
}
/* ------------------------------------------------------------------------
 * Name:        P1_Quit 
 * Purpose:     Called by a process on itself.  Kills itself and returns status to parent.
 * Parameter:   int status - The return status of the process
 * Returns:     none
 * Side Effects:ReadyList modified
 *              Process Table modified
 *              Current Process changes
 * ----------------------------------------------------------------------- */
void P1_Quit(int status) {
//    USLOSS_Console("\t\t%d\n",status);
//    USLOSS_Console("\t\t%d\n",P1_GetPID());
    if(DEBUG == 3) USLOSS_Console("P1_Quit(): Process %d Entered P1_Quit\n",P1_GetPID());
//--Check in kernel mode
    if(!isKernel()) {
        USLOSS_Console("ERROR: Not in kernel mode!\n");
        USLOSS_Halt(1);
    }
    int currentProcParentPID = procTable[P1_GetPID()].parentPID;

//--Disable interrupts
//--Iterate through children
    if(DEBUG == 3) USLOSS_Console("P1_Quit(): Setting all children's parent pid to -1\n");
    Node *node = procTable[P1_GetPID()].children->first;
    while(node->next != NULL) {
//----Set parent PID to empty
        procTable[node->pid].parentPID = -1;
    }
//--Clean up proc table entry
    if(DEBUG >= 2) USLOSS_Console("P1_Quit(): Process finished with status: %d\n",status);
    procTable[P1_GetPID()].return_status = status;
    procTable[P1_GetPID()].status = FINISHED;

//--Remove then append process to parent's child block, making it so that the first process to 
//--quit will be the first process with a status of quit it finds. 
    if(DEBUG >= 2) USLOSS_Console("P1_Quit(): Move node to back of parent's list\n");
    if(DEBUG == 3) { 
        USLOSS_Console("-----P1_Quit(): Printing child list-----\n");
        print_list(procTable[currentProcParentPID].children);
    }
    remove_node(procTable[currentProcParentPID].children, P1_GetPID());
    append_list(procTable[currentProcParentPID].children, P1_GetPID(), procTable[currentProcParentPID].priority);

//--Unblock parent (if blocked)
    if(DEBUG >= 2) USLOSS_Console("P1_Quit(): Unblock Parent\n");
    if(procTable[currentProcParentPID].status == BLOCKED){
        procTable[currentProcParentPID].status = READY;
        insert(readyList,currentProcParentPID, procTable[currentProcParentPID].priority);}
//--Remove Node from ReadyList
    if(DEBUG >= 2) USLOSS_Console("P1_Quit(): Removing from readylist\n");
    if(DEBUG == 3) { USLOSS_Console("P1_Quit(): Ready list prior to remove\n"); print_list(readyList); }
    remove_node(readyList,P1_GetPID());
    if(DEBUG == 3){ USLOSS_Console("P1_Quit(): Read List after remove \n"); print_list(readyList);}
//--Call dispatcher
    if(DEBUG >= 2) USLOSS_Console("P1_Quit(): Calling dispatcher()\n");
    numberProcs--;
    dispatcher();
//--Enable interrupts
}
/* ------------------------------------------------------------------------
 * Name:        P1_Kill 
 * Purpose:     Used by a process to kill another process
 * Parameter:   int PID - Process to be killed
 *              int status - return status of the killed process
 * Returns:     int result - 
 *                  -2: PID belongs to current process
 *                  -1: Invalid PID
 *                   0: Successfull Kill
 * Side Effects:ReadyList, Process Table modified
 * ----------------------------------------------------------------------- */
int P1_Kill(int PID, int status) {

    if(DEBUG == 3) USLOSS_Console("P1_Kill(): Entered P1_Kill\n");
    if(DEBUG == 3) USLOSS_Console("P1_Kill(): PID: %d\n",PID);
//--Check in kernel mode
    if(!isKernel()) {
        USLOSS_Console("ERROR: Not in kernel mode!\n");
        USLOSS_Halt(1);
    }

//--Check if PID is Current Process
    if(PID == P1_GetPID()){
        if(DEBUG == 3) USLOSS_Console("P1_Kill(): You can't kill yourself\n");
        return -2;
    }

//--Check if PID is valid
    if(procTable[PID].status == NO_PROCESS){
        if(DEBUG == 3) USLOSS_Console("P1_Kill(): No process with this PID!\n");
        return -1;
    }
//--Can't Kill the Sentinel
    if(PID == 0) {
        if(DEBUG == 3) USLOSS_Console("P1_Kill(): Can't kill sentinel (PID=0)\n");
        return -1;
    }
//--Disable interrupts
//--Iterate through children
    if(DEBUG == 3) USLOSS_Console("P1_Kill(): Setting all children's parent pid to -1\n");

    Node *node = procTable[PID].children->first;

    while(node->next != NULL) {
//----Set parent PID to empty
        procTable[node->pid].parentPID = -1;
    }
//--Clean up proc table entry
    if(DEBUG >= 2) USLOSS_Console("P1_Kill(): Process finished withs status: %d\n",status);
    //USLOSS_Console("\tPID: %d\n\tStatus: %d\n",PID,status);
    procTable[PID].return_status = status;
    procTable[PID].status = FINISHED;

    int currentProcParentPID = procTable[P1_GetPID()].parentPID;
//--Remove then append process to parent's child block, making it so that the first process to 
//--quit will be the first process with a status of quit it finds. 

    remove_node(procTable[currentProcParentPID].children, P1_GetPID());
    append_list(procTable[currentProcParentPID].children, P1_GetPID(),procTable[currentProcParentPID].priority);

//--Unblock parent (if blocked)
    if(currentProcParentPID >= 0){
        if(procTable[currentProcParentPID].status == BLOCKED){
            procTable[currentProcParentPID].status = READY;
            insert(readyList,currentProcParentPID, procTable[currentProcParentPID].priority);}
    }
//--Call dispatcher
    numberProcs--;

    return 0;
}
/* ------------------------------------------------------------------------
 * Name:        P1_Join
 * Purpose:     Syncronizes termination of a child with its parent.  When called the parent
 *                  is blocked until one of its children exits.
 * Parameter:   int *status - Location to store return status of child
 * Returns:     int pid:
 *                  -1: Process has no children
 *                 >=0: PID of child that quit
 * Side Effects:*status is updated to reflect child return status
 *              parent process is blocked
 * ----------------------------------------------------------------------- */
int P1_Join(int *status) {
 
    if(DEBUG == 3) USLOSS_Console("P1_Join(): Entered P1_Join\n");
//--Check in kernel mode
    if(!isKernel()) {
        USLOSS_Console("ERROR: Not in kernel mode!\n");
        USLOSS_Halt(1);
    }
//--Disable interrupts
//--Validate input
//----Make sure process has kids

    Node *node = procTable[P1_GetPID()].children->first;
    if(node->next == NULL){
        procTable[P1_GetPID()].status = BLOCKED;
        if(DEBUG == 3) USLOSS_Console("P1_Join(): Process %d has no children\n", node->pid);
        return -1;
    }
    else{
        //--Get !first! quit child

//        P1_P((P1_Semaphore) procTable[P1_GetPID()].QuitChildren);

        if(DEBUG == 3) USLOSS_Console("P1_Join(): Getting first quit child for process %d\n", node->pid);
        while(node->next != NULL){
            if(procTable[node->pid].status == FINISHED){
                //Not sure what to do, but this is when it finds its first quit child
                //Something about quitting the child or parent or both, I'm not sure.
                *status = procTable[node->pid].return_status;
                int pid = node->pid;
                remove_node(procTable[P1_GetPID()].children,pid);
                return pid;
            }
            node = node->next;
        }
        //----If no quit child, block until child returns
        procTable[P1_GetPID()].status = BLOCKED;
    }

//--Clean up child process
    
//--Enable interrupts
//--Return child PID
//Must be first node
    node = procTable[P1_GetPID()].children->first;
    *status = procTable[node->pid].return_status;
    return node->pid;
}
/* ------------------------------------------------------------------------
 * Name:        P1_getPID 
 * Purpose:     Returns the PID of the currently running process
 * Parameter:   none
 * Returns:     int pid - PID of current process
 * Side Effects:none
 * ----------------------------------------------------------------------- */
int P1_GetPID() { return currentPID; }
/* ------------------------------------------------------------------------
 * Name:        P1_DumpProcesses 
 * Purpose:     Prints all processes' PCB in a readable format
 * Parameter:   none
 * Returns:     none
 * Side Effects:none
 * ----------------------------------------------------------------------- */
void P1_DumpProcesses() {
    if(DEBUG == 3) USLOSS_Console("P1_DumpProcesses(): Entering DumpProcesses\n");
    int i;
    int runningProcesses = 0;

    USLOSS_Console("------------------------------Process Dump---------------------------------\n");
    USLOSS_Console("%10s%10s%10s%10s%10s%10s%15s\n","Name","PID","PPID","Priority","Status","Children","Clock Cycles");
    for(i = 0; i < P1_MAXPROC; i++) {
        if(procTable[i].status != NO_PROCESS) {
            runningProcesses++;
            PCB proc = procTable[i];
            USLOSS_Console("%10s%10d%10d%10d%10d%10d%15d\n",proc.name,proc.PID,proc.parentPID,proc.priority,proc.status,-1,proc.cyclesUsed);
        }
    }
     USLOSS_Console("---------------------------------------------------------------------------\n");   
     USLOSS_Console("There are %d running processes.\n",runningProcesses);

     if(DEBUG == 3) USLOSS_Console("P1_DumpProcesses(): Leaving DumpProcessesi\n");
}
/* ------------------------------------------------------------------------
 * Name:        sentinel
 * Purpose:     Serves as holding pattern for OS when no other processes to run
 *              Also detects and report simple deadlock states
 * Parameter:   None
 * Returns:     Nothing
 * Side Effects:If in deadlock, halt
 * ----------------------------------------------------------------------- */
int sentinel(void *notused) {
    if(DEBUG == 3) USLOSS_Console("Number of Processes: %d\n",numberProcs);
    while(numberProcs > 1) {
    //--Check for deadlock (NOT IMPLEMENTED)
    //--Commented out since interrupts are not implemented
        //USLOSS_WaitInt();
    }
    USLOSS_Halt(0);
    return(0);
}

/* ------------------------------------------------------------------------
 * Name:        isKernel 
 * Purpose:     Detects if the OS is in Kernel Mode or User Mode
 * Parameter:   None
 * Returns:     0: OS is in kernel mode
 *             !0: OS is in user mode
 * Side Effects:None
 * ----------------------------------------------------------------------- */
int isKernel() {
    return (USLOSS_PSR_CURRENT_MODE & USLOSS_PsrGet());
}




/* ------------------------------------------------------------------------
 * Name: 
 * Purpose:
 * Parameter:
 * Returns:
 * Side Effects:
 * ----------------------------------------------------------------------- */
void dispatcher() {
    if(DEBUG == 3) USLOSS_Console("dispatcher(): Entered Dispatcher\n");
    if(DEBUG == 3) {
        USLOSS_Console("-----Dispatcher: Printing ReadList-----\n");
        print_list(readyList);
    }
    if(!isKernel()) {
      USLOSS_Console("ERROR: Not in kernel mode. Exiting...\n");
      USLOSS_Halt(1);
    }
    if(DEBUG == 3) USLOSS_Console("dName: %s PID: %d Status: %d\n",
            procTable[readyList->first->pid].name,
            procTable[readyList->first->pid].PID,
            procTable[readyList->first->pid].status
    );
    if(procTable[readyList->first->pid].status != 1)
        pop(readyList);
    Node *next = pop(readyList);
    PCB cur = procTable[next->pid];
    if(DEBUG == 3) USLOSS_Console("dispatcher(): Ready Process: %s\tPID:%d\tPriority:%d\tStatus:%d\n",cur.name,cur.PID,cur.priority,cur.status);
    if(DEBUG == 3) {
        USLOSS_Console("-----dispatcher: Printing readylist-----\n");
        print_list(readyList);
    }
//--Check if the 1st or 2nd run    
    if(P1_GetPID() < 0) {
        if(DEBUG >= 2) USLOSS_Console("dispatcher(): Ready Process: %s %d %d\n",procTable[next->pid].name,next->pid,procTable[next->pid].priority);
    //--If next process is sentinel, add back to list
        if(procTable[next->pid].priority == MINPRIORITY) {
            if(DEBUG == 3) USLOSS_Console("dispatcher(): First run, dont run Sentinel\n");
            append_list(readyList,next->pid,MINPRIORITY);
            if(DEBUG == 3) USLOSS_Console("dispatcher(): Sentinel added to end of readyList\n");
    //--Otherwise its the 2nd run, so switch to that process
        } else {
            if(DEBUG == 3) USLOSS_Console("dispatcher(): Second run, run process %s %d\n", procTable[next->pid].name,next->pid);
            currentPID = next->pid;
            USLOSS_ContextSwitch(NULL,&procTable[currentPID].context);
        }
//--Must not be at the beginning
    } else {
        if(DEBUG >= 2) USLOSS_Console("dispatcher(): Not 1st/2nd run, switching contexts\n");
        int oldPID = currentPID;
        currentPID=next->pid;

        if(procTable[oldPID].status != BLOCKED && procTable[oldPID].status != FINISHED)
            insert(readyList,oldPID,procTable[oldPID].priority);

        if(DEBUG == 3) {
            USLOSS_Console("-----Dispatcher: Printing ReadList-----\n");
            print_list(readyList);
        }
        if(DEBUG == 3) {
            USLOSS_Console("dispatcherr(): \n \tOld Pid: %d\n", oldPID);
            USLOSS_Console("\tNew Pid: %d\n", next->pid);
        }


        procTable[currentPID].time_start = USLOSS_Clock();

        USLOSS_ContextSwitch(&procTable[oldPID].context, &procTable[next->pid].context);
    }
    if(DEBUG >= 2) USLOSS_Console("dispatcher(): Exiting Dispatcher\n");
}

P1_Semaphore P1_SemCreate(unsigned int PValue) {
    if(!isKernel()) { 
        USLOSS_Console("ERROR: Not in kernel mode. Exiting...\n"); 
        USLOSS_Halt(1); 
    }
    unsigned int curr_state = USLOSS_PsrGet(); 
    USLOSS_PsrSet(curr_state & (~USLOSS_PSR_CURRENT_INT));
    numberOfSemaphores++;
    if(numberOfSemaphores > P1_MAXSEM) { 
        USLOSS_Halt(1); 
    }

    Semaphore *s = malloc(sizeof(Semaphore)); 
    s->value=PValue; 
    s->q = create_list();
    USLOSS_PsrSet(curr_state);

    return (P1_Semaphore)s; 
}


void P1_SemFree(P1_Semaphore s){
if(!isKernel()) { 
USLOSS_Console("ERROR: Not in kernel mode. Exiting...\n"); 
USLOSS_Halt(1); 
}

unsigned int curr_state = USLOSS_PsrGet(); 
    USLOSS_PsrSet(curr_state & (~USLOSS_PSR_CURRENT_INT));

    Semaphore *s2 = (Semaphore *) s; 
    if(s2->q->first != NULL){ 
        USLOSS_Halt(1); 
    }

    free(s2);

    numberOfSemaphores--;

    USLOSS_PsrSet(curr_state); 
    return; 
}

/* ------------------------------------------------------------------------
 * Name: 
 * Purpose:
 * Parameter:
 * Returns:
 * Side Effects:
 * ----------------------------------------------------------------------- */
void P1_P(P1_Semaphore s) {
    Semaphore *s2 = (Semaphore *) s;
    int curr_state;    
    while(1){
        curr_state = USLOSS_PsrGet(); 
        USLOSS_PsrSet(curr_state & (~USLOSS_PSR_CURRENT_INT)); 
        if (s2->value > 0){ 
            s2->value--; 
            goto done; 
        }

    append_list(s2->q, currentPID, 0); 
    remove_node(readyList, currentPID); 
    USLOSS_PsrSet(curr_state); 
    dispatcher();
    } done: // Enable interrupts 
    USLOSS_PsrSet(curr_state); 
}
/* ------------------------------------------------------------------------
 * Name: 
 * Purpose:
 * Parameter:
 * Returns:
 * Side Effects:
 * ----------------------------------------------------------------------- */
void P1_V(P1_Semaphore s) {

    Semaphore *s2 = (Semaphore *) s;

    unsigned int curr_state = USLOSS_PsrGet(); 
    USLOSS_PsrSet(curr_state & (~USLOSS_PSR_CURRENT_INT));

    s2->value++;

    Node *node = pop(s2->q); 
    insert(readyList, node, node.priority);

    USLOSS_PsrSet(curr_state); 
}
/* ------------------------------------------------------------------------
 * Name: P1_WaitDevice 
 * Purpose: Synchronizes Intterupt Handlers and waits on semaphor associated with device
 * Parameter:   int type - device type
 *              int unit - which unit of that type 
 *              int *status - Where the device's status register is stored
 * Returns:     -2 - Invalid Type
 *              -1 - Invalid Unite
 *               0 - Success
 * Side Effects: Status is updated 
 * ----------------------------------------------------------------------- */
int P1_WaitDevice(int type, int unit, int *status) {
//--Usual Checks
    if(!isKernel()) {
        USLOSS_Console("ERROR: Not in kernel mode. Exiting...\n");
        USLOSS_Halt(1);
    }
//--Disable Interrupts
    switch(type) {
        case USLOSS_CLOCK_DEV:
            if(unit != 0)
                return -1;
            P1_P(clock_sem);
            break;
        case USLOSS_ALARM_DEV:
            if(unit != 0)
                return -1;
            P1_P(alarm_sem);
            status = &alarm_status;
            break;
        case USLOSS_DISK_DEV:
            if(unit == 0) {
                P1_P(disk_sem_0);
                status = &disk_status_0;
            }
            else if(unit == 1){
                P1_P(disk_sem_1);
                status = &disk_status_1;
            }
            else
                return -1;
            break;
        case USLOSS_TERM_DEV:
            if(unit == 0) {
                P1_P(term_sem_0);
                status = &term_status_0; 
            }
            else if(unit == 1) {
                P1_P(term_sem_1);
                status = &term_status_1;
            }
            else if(unit == 2) {
                P1_P(term_sem_2);
                status = &term_status_2;
            }
            else if(unit == 3) {
                P1_P(term_sem_3);
                status = &term_status_3;
            }
            else
                return -1;
            break;
        default:
            return -2;
    }

//--Enable interupts
}

//--Interrupt Handlers
void clock_handler(int dev, void *arg) {
    if(DEBUG >= 2) USLOSS_Console("clock_handler(): In Clock_Handler()\n");
    quantum_count++; clock_count++;
    if(DEBUG == 3) USLOSS_Console("clock_handler():  Quantum: %d\n\t\t  Clock: %d\n",quantum_count,clock_count);
    int status, result;
    if(clock_count == 5) {
        if(DEBUG == 3) USLOSS_Console("clock_handler(): resetting clock\n");
        clock_count = 0;
        result = USLOSS_DeviceInput(USLOSS_CLOCK_DEV,0,&status);
        if(result == USLOSS_DEV_OK) {
            if(DEBUG == 3) USLOSS_Console("clock_handler(): OK, V the clock semaphore\n");
            P1_V(clock_sem);
        }
        else {
            USLOSS_Console("ERROR: Clock failed! Exiting....'n");
            USLOSS_Halt(1);
        }
    }
    if(quantum_count == 4) { 
        if(DEBUG == 3) USLOSS_Console("clock_handler(): Quantum is 4. Call dispatcher\n");
        dispatcher();
    }
}
void alarm_handler(int dev, void *arg) {
    int result; int status;
    result = USLOSS_DeviceInput(USLOSS_ALARM_DEV,0,&status);
    if(result == USLOSS_DEV_OK) {
        alarm_status = status;
        P1_V(alarm_sem);
    }
    else {
        USLOSS_Console("ERROR: Alarm Device NOT OKAY\n");
    }
}
void disk_handler(int dev, void *arg) {
    int result; int status;
    int unit = (long int)arg;
    result = USLOSS_DeviceInput(dev,unit,&status);
    if(result == USLOSS_DEV_OK) {
        if(unit == 0) {
            disk_status_0 = status;
            P1_V(disk_sem_0);
        }
        else if(unit == 1) {
            disk_status_1 = status;
            P1_V(disk_sem_1);
        }
        else {
            USLOSS_Console("ERROR: Invalid Unit in Disk_Handler.\n");
        }
    }
    else{
        USLOSS_Console("ERROR: Disk Device NOT OKAY\n");
    }
    dispatcher();
}
void term_handler(int dev, void *arg) {
    int result; int status;
    int unit = (long int)arg;
    result = USLOSS_DeviceInput(dev,unit,&status);
    if(result == USLOSS_DEV_OK) {
        switch(unit) {
            case 0:
                term_status_0 = status;
                P1_V(term_sem_0);
                break;
            case 1:
                term_status_1 = status;
                P1_V(term_sem_1);
                break;
            case 2:
                term_status_2 = status;
                P1_V(term_sem_2);
                break;
            case 3:
                term_status_3 = status;
                P1_V(term_sem_3);
                break;
            default:
                USLOSS_Console("ERROR: Invalid Unit in Term_Handler\n");
        }
    }
}
void sys_handler(int dev, void *arg) {
    //WHAT ON EARTH IS THE SYSCALL VECTOR/ARRAY?
    //NOT IN THE USERS MANUAL
    int syscall_vec[10];
    int index;
    USLOSS_Sysargs *sysArgsPointer = (USLOSS_Sysargs *)arg;
    int oldPsr = USLOSS_PsrGet();
    index = sysArgsPointer->number;
    if(syscall_vec[index] == NULL) {
        USLOSS_Console("ERROR: SysCalls not implemented\n");
    }
    else {
        USLOSS_PsrSet(oldPsr | USLOSS_PSR_CURRENT_INT);
        //(Syscalls_vec[index])(sysArgsPointer);
        USLOSS_PsrSet(oldPsr);
    }

}
